@page "/collectionView/{ipfSAddress}/{collectionId}"
@using LoopheadsExplorer.Data
@using LoopheadsExplorer.Models
@using System.Diagnostics
@inject EthereumService EthereumService
@inject IpfsService IpfsService


<PageTitle>Collection</PageTitle>
<h1>Collection #@collectionId</h1>
@if(loopheadIpfsLinks.Count == 0)
{
    <p>Retrieving data...</p>
}
else
{
    int count = 0;
    foreach(var loopheadIpfsLink in loopheadIpfsLinks)
    {
        if(count != 1000)
        {
            var tempCount = count;
            <h2>Loophead #@count <button type="button" disabled=@variationButtonStates[tempCount] class="btn btn-primary" @onclick="@(e => GetLoopheadMetadataLinks(e, loopheadIpfsLink.cid, tempCount))">View variations</button></h2>
        }
        @if(loopheadIpfsLinks.Any(x => x.loopheads.Count > 0))
        {
            foreach(var loopheadVariations in loopheadIpfsLink.loopheads)
            {
                if(loopheadVariations.baseCid == loopheadIpfsLink.cid)
                {
                    <h3>Variation #@loopheadVariations.variation</h3>
                }
            }
        }
        count++;
    }

}


@code {
    private List<LoopheadIpfsLink> loopheadIpfsLinks;
    private List<bool> variationButtonStates;

    [Parameter]
    public string ipfsAddress { get; set; }
    [Parameter]
    public string collectionId { get; set; }

    private string cloudflareIpfsGatewayUrl = "https://cloudflare-ipfs.com/ipfs/";

    protected override async Task OnInitializedAsync()
    {
        loopheadIpfsLinks = new List<LoopheadIpfsLink>();
        variationButtonStates = new List<bool>();
        //string baseUri = await EthereumService.GetLoopheadBaseUri(contractAddress);
        IpfsData ipfsDataLevelOne = await IpfsService.GetDirectoryContents(ipfsAddress);
        //IpfsData ipfsDataLevelTwo = await IpfsService.GetDirectoryContents(ipfsDataLevelOne.links[0].Cid.value)
        foreach(var links in ipfsDataLevelOne.links)
        {
            if(links.Name != "mint-params.json")
            {
                LoopheadIpfsLink loopheadIpfsLink = new LoopheadIpfsLink
                {
                    name = links.Name,
                    cid = links.Cid.value
                };
                loopheadIpfsLinks.Add(loopheadIpfsLink);
                variationButtonStates.Add(false);
            }
        }
        /*
        foreach(var link in ipfsDataLevelTwo.links)
            {
            Loophead loophead = new Loophead
                    {
                    baseId = link.Name.Split('_')[0],
                    variation = link.Name.Split('_')[1],
                    metadataCidLink = link.Cid.value
            };
            loopheads.Add(loophead);
        }   
         */   
    }

    private async void GetLoopheadMetadataLinks(MouseEventArgs e, string loopheadMetadataLink, int buttonId)
    {
        variationButtonStates[buttonId] = true;
        IpfsData ipfsDataLevelTwo = await IpfsService.GetDirectoryContents(loopheadMetadataLink);
        foreach(var link in ipfsDataLevelTwo.links)
        {
            foreach(var ipfsLink in loopheadIpfsLinks)
            {
                //Debug.WriteLine(ipfsLink.cid);
                //Debug.WriteLine(loopheadMetadataLink);
                if(ipfsLink.cid == loopheadMetadataLink)
                {
                    Loophead loophead = new Loophead
                        {
                            baseCid = loopheadMetadataLink,
                            baseId = link.Name.Split('_')[0],
                            variation = link.Name.Split('_')[1],
                            metadataCidLink = link.Cid.value
                        };
                    ipfsLink.loopheads.Add(loophead);
                    break;
                }
            }
        }
        StateHasChanged();
    }

    /*
    private async void GetLoopheadMetadata(MouseEventArgs e, string loopheadMetadataLink)
    {
        IpfsData ipfsDataLevelThree = await IpfsService.GetDirectoryContents(loopheadMetadataLink);
        LoopheadMetadata loopheadMetadata = await IpfsService.GetLoopheadMetadata(ipfsDataLevelThree.links[0].Cid.value);
        foreach(var loophead in loopheads)
        {
            if(loophead.metadataCidLink == loopheadMetadataLink)
            {
                loophead.metadata = loopheadMetadata;
                break;
            }
        }
        StateHasChanged();
    }
     */

}
