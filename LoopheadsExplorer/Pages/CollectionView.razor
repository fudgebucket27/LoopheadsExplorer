@page "/collectionView/{ipfSAddress}/{collectionId}"
@using LoopheadsExplorer.Data
@using LoopheadsExplorer.Models
@inject EthereumService EthereumService
@inject IpfsService IpfsService


<PageTitle>Collection</PageTitle>
<h1>Collection #@collectionId</h1>
@if(loopheadIpfsLinks.Count == 0)
{
    <p>Retrieving data...</p>
}
else
{
    for (int i = 0; i < loopheadIpfsLinks.Count; i++)
    {
        <h2>Loophead #@i</h2>
    }
       /*
    for(int i = 0; i < loopheads.Count; i++)
    {
        List<Loophead> loopheadCollection = loopheads.Where(x => x.baseId == i.ToString()).ToList();
        <h2>Loophead #@i</h2>
        foreach(var loophead in loopheadCollection)
        {
            <h3>Variation #@loophead.variation <button type="button" class="btn btn-primary" @onclick="@(e => GetLoopheadMetadata(e, loophead.metadataCidLink))">View</button></h3>

            if(@loophead.metadata != null)
            {
                var loopheadImageUrl = cloudflareIpfsGatewayUrl + loophead.metadata.image.Remove(0, 7);
                <div class="card" style="width: 300px;">
                  <img src="@loopheadImageUrl" class="card-img-top" alt="loophead image">
                  <div class="card-body">
                    <p class="card-text">Name: @loophead.metadata.name</p>
                    <p class="card-text">Description: @loophead.metadata.description</p>
                    <p class="card-text">Image Url: @loophead.metadata.image</p>
                    <p class="card-text">External Uri: @loophead.metadata.externalUri</p>
                    <p class="card-text">Cache Expiry Seconds: @loophead.metadata.cacheExpirySeconds</p>
                    @foreach(var trait in loophead.metadata.attributes)
                    {
                        <p class="card-text">Trait type: @trait.traitType</p>
                        <p class="card-text">Value: @trait.value</p>
                    }
                 </div>
                </div>
            }
        }
    }
    */
}

@code {
    private List<Loophead> loopheads;
    private List<LoopheadIpfsLink> loopheadIpfsLinks;

    [Parameter]
    public string ipfsAddress { get; set; }
    [Parameter]
    public string collectionId { get; set; }

    private string cloudflareIpfsGatewayUrl = "https://cloudflare-ipfs.com/ipfs/";

    protected override async Task OnInitializedAsync()
    {
        loopheads = new List<Loophead>();
        loopheadIpfsLinks = new List<LoopheadIpfsLink>();
        //string baseUri = await EthereumService.GetLoopheadBaseUri(contractAddress);
        IpfsData ipfsDataLevelOne = await IpfsService.GetDirectoryContents(ipfsAddress);
        //IpfsData ipfsDataLevelTwo = await IpfsService.GetDirectoryContents(ipfsDataLevelOne.links[0].Cid.value)
        foreach(var links in ipfsDataLevelOne.links)
        {
            if(links.Name != "mint-params.json")
            {
                LoopheadIpfsLink loopheadIpfsLink = new LoopheadIpfsLink
                {
                    name = links.Name,
                    cid = links.Cid.value
                };
                loopheadIpfsLinks.Add(loopheadIpfsLink);
            }
        }
        /*
        foreach(var link in ipfsDataLevelTwo.links)
            {
            Loophead loophead = new Loophead
                    {
                    baseId = link.Name.Split('_')[0],
                    variation = link.Name.Split('_')[1],
                    metadataCidLink = link.Cid.value
            };
            loopheads.Add(loophead);
        }   
         */   
    }

    private async void GetLoopheadMetadataLinks(MouseEventArgs e, string loopheadMetadataLink)
    {
        IpfsData ipfsDataLevelTwo = await IpfsService.GetDirectoryContents(loopheadMetadataLink);
        foreach(var link in ipfsDataLevelTwo.links)
        {
            foreach(var ipfsLink in loopheadIpfsLinks)
            {
                if(ipfsLink.cid == loopheadMetadataLink)
                {
                    ipfsLink.cid = loopheadMetadataLink;
                    break;
                }
            }
        }
        StateHasChanged();
    }

    private async void GetLoopheadMetadata(MouseEventArgs e, string loopheadMetadataLink)
    {
        IpfsData ipfsDataLevelThree = await IpfsService.GetDirectoryContents(loopheadMetadataLink);
        LoopheadMetadata loopheadMetadata = await IpfsService.GetLoopheadMetadata(ipfsDataLevelThree.links[0].Cid.value);
        foreach(var loophead in loopheads)
        {
            if(loophead.metadataCidLink == loopheadMetadataLink)
            {
                loophead.metadata = loopheadMetadata;
                break;
            }
        }
        StateHasChanged();
    }
}
