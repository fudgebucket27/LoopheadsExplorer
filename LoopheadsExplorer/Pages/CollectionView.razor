@page "/collectionView/{contractAddress}/{collectionId}"
@using LoopheadsExplorer.Data
@using LoopheadsExplorer.Models
@inject EthereumService EthereumService
@inject IpfsService IpfsService


<PageTitle>Collection @collectionId</PageTitle>


<h2>Collection #@collectionId</h2>
<a href="https://etherscan.io/address/@contractAddress" target="_blank">Contract Address: @contractAddress </a>
@if(loopheads.Count == 0)
{
    <p>Retrieving data...</p>
}
else
{
    for(int i = 0; i < 5; i++)
    {
        List<Loophead> loopheadCollection = loopheads.Where(x => x.baseId == i.ToString()).ToList();
        <h2>Loophead #@i</h2>
        foreach(var loophead in loopheadCollection)
        {
            <h3>Variation #@loophead.variation <button type="button" class="btn btn-primary" @onclick="@(e => GetLoopheadMetadata(e, loophead.metadataCidLink))">View</button></h3>

            if(@loophead.metadata != null)
            {
                var loopheadImageUrl = cloudflareIpfsGatewayUrl + loophead.metadata.image.Remove(0, 7);
                <div class="card" style="width: 300px;">
                  <img src="@loopheadImageUrl" class="card-img-top" alt="loophead image">
                  <div class="card-body">
                    <p class="card-text">Name: @loophead.metadata.name</p>
                    <p class="card-text">Description: @loophead.metadata.description</p>
                    <p class="card-text">Image Url: @loophead.metadata.image</p>
                    <p class="card-text">External Uri: @loophead.metadata.externalUri</p>
                    <p class="card-text">Cache Expiry Seconds: @loophead.metadata.cacheExpirySeconds</p>
                    @foreach(var trait in loophead.metadata.attributes)
                    {
                        <p class="card-text">Trait type: @trait.traitType</p>
                        <p class="card-text">Value: @trait.value</p>
                    }
                 </div>
                </div>
            }
        }
    }
}

@code {
    private List<Loophead> loopheads = new List<Loophead>();

    [Parameter]
    public string contractAddress { get; set; }
    [Parameter]
    public string collectionId { get; set; }
    private string cloudflareIpfsGatewayUrl = "https://cloudflare-ipfs.com/ipfs/";

    protected override async Task OnInitializedAsync()
    {
        string baseUri = await EthereumService.GetLoopheadBaseUri(contractAddress);
        IpfsData ipfsDataLevelOne = await IpfsService.GetDirectoryContents(baseUri);
        IpfsData ipfsDataLevelTwo = await IpfsService.GetDirectoryContents(ipfsDataLevelOne.links[0].Cid.value);
        foreach(var link in ipfsDataLevelTwo.links)
        {
            Loophead loophead = new Loophead
            {
                    baseId = link.Name.Split('_')[0],
                    variation = link.Name.Split('_')[1],
                    metadataCidLink = link.Cid.value
            };
            loopheads.Add(loophead);
        }
    }

    private async void GetLoopheadMetadata(MouseEventArgs e, string loopheadMetadataLink)
    {
        IpfsData ipfsDataLevelThree = await IpfsService.GetDirectoryContents(loopheadMetadataLink);
        LoopheadMetadata loopheadMetadata = await IpfsService.GetLoopheadMetadata(ipfsDataLevelThree.links[0].Cid.value);
        foreach(var loophead in loopheads)
        {
            if(loophead.metadataCidLink == loopheadMetadataLink)
            {
                loophead.metadata = loopheadMetadata;
                break;
            }
        }
        StateHasChanged();
    }
}
