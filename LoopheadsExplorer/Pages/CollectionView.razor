@page "/collectionView/{ipfSAddress}/{collectionId}/{increment}"
@using LoopheadsExplorer.Data
@using LoopheadsExplorer.Models
@using System.Diagnostics
@using System.Numerics
@inject EthereumService EthereumService
@inject IpfsService IpfsService


<PageTitle>Collection</PageTitle>
<h1>Collection #@collectionId</h1>

@if(loopheadIpfsLinks.Count == 0)
{
    <p>Retrieving data...</p>
}
else
{
    int count = 0;
    int collectionCount = 1;

    foreach(var loopheadIpfsLink in loopheadIpfsLinks)
    {
        int collectionIdIncrement = collectionCount + Int32.Parse(increment);
        string tradingHistoryLink = "";

        if (collectionId == "1")
        {
            string minter = "0x0dc6a4682fdd859a41b5e7c9b473b31995f98236";
            string contractAddress = "0x1cacc96e5f01e2849e6036f25531a9a064d2fb5f";
            string nftId = "0x0" + BigInteger.Parse(loopheadIpfsLink.name).ToString("x");
            tradingHistoryLink = "https://explorer.loopring.io/nft/" + minter + "-0-" + contractAddress + "-" + nftId + "-0";
        }
        if(count != 1000)
        {   
            <h2>Loophead #@collectionIdIncrement <button type="button" class="btn btn-primary" @onclick="@(e => GetLoopheadVariationMetadataLinks(e, loopheadIpfsLink.cid))">View variations</button><a href="@tradingHistoryLink" target="_blank"><button type="button" class="btn btn-primary" >View trading history</button></a></h2>
        }
        <LoopheadVariationRetrievalStateView loopheadVariationRetrievalStates="@loopheadVariationRetrievalStates" ipfsLinkCid="@loopheadIpfsLink.cid"/> 
        @if(loopheadIpfsLinks.Where(x => x.loopheads.Count > 0).Any())
        {        
            @:@{
                var tabId = "myTab" + collectionCount.ToString();
                <ul class="nav nav-pills" id="@tabId" role="tablist">
                @foreach (var loopheadVariations in loopheadIpfsLink.loopheads)
                {
                    if (loopheadVariations.baseCid == loopheadIpfsLink.cid)
                    {
                      string variationNavTabId = "nav" + collectionIdIncrement.ToString() + loopheadVariations.baseId.ToString() + @loopheadVariations.variation.ToString() + "-tab";
                      string variationNavTabTarget = "nav" + collectionIdIncrement.ToString() + loopheadVariations.baseId.ToString() + @loopheadVariations.variation.ToString();
                      <li class="nav-item" role="presentation">
                          <button class="nav-link" id="@variationNavTabId"  data-bs-toggle="pill" data-bs-target="#@variationNavTabTarget" type="button" role="tab" aria-controls="@variationNavTabTarget" aria-selected="false" @onclick="@(e => GetLoopheadVariationMetadata(e, loopheadVariations.metadataCidLink))">@loopheadVariations.baseId-@loopheadVariations.variation</button>
                      </li>
                    }
                }
                </ul>
                var tabContentId = "myTabContent" + collectionCount.ToString();
                <div class="tab-content" id="@tabContentId">
                    @foreach (var loopheadVariations in loopheadIpfsLink.loopheads)
                    {
                        if (loopheadVariations.baseCid == loopheadIpfsLink.cid)
                        {
                            string variationTabPaneId =  "nav" + collectionIdIncrement.ToString() + loopheadVariations.baseId.ToString() + @loopheadVariations.variation.ToString();
                            string variationTabPaneTarget =  "nav" + collectionIdIncrement.ToString() + loopheadVariations.baseId.ToString() + @loopheadVariations.variation.ToString() + "-tab";
                            <div class="tab-pane fade" id="@variationTabPaneId" role="tabpanel" aria-labelledby="@variationTabPaneTarget">
                                 @foreach(var loopheadMetadataRetrievalState in loopheadMetadataRetrievalStates)
                                 {
                                    if(loopheadMetadataRetrievalState.metadataCid == loopheadVariations.metadataCidLink && loopheadMetadataRetrievalState.retrievalState == RetrievalState.retrieving && loopheadVariations.metadata == null)
                                    {
                                        <p>Retrieving metadata...</p>
                                    }
                                    else if(loopheadMetadataRetrievalState.metadataCid == loopheadVariations.metadataCidLink && loopheadMetadataRetrievalState.retrievalState == RetrievalState.error && loopheadVariations.metadata == null)
                                    {
                                        <p>Issue with retrieving metadata, try again...</p>
                                    }
                                 }
                                @if (loopheadVariations.metadata != null)
                                 {
                                     <LoopheadMetadataView loopheadMetadata="loopheadVariations.metadata" ipfsGatewayUrl="@cloudflareIpfsGatewayUrl" />
                                 }
                            </div>
                        }                        
                    }
                </div>
            }
        }

        count++;
        collectionCount++;
    }

}


@code {
    private List<LoopheadIpfsLink> loopheadIpfsLinks;
    private List<LoopheadMetadataRetrievalState> loopheadMetadataRetrievalStates;
    private List<LoopheadVariationRetrievalState> loopheadVariationRetrievalStates;

    [Parameter]
    public string ipfsAddress { get; set; }
    [Parameter]
    public string collectionId { get; set; }
    [Parameter]
    public string increment { get; set; }


    private string cloudflareIpfsGatewayUrl = "https://loopring.mypinata.cloud/ipfs/";

    protected override async Task OnInitializedAsync()
    {
        loopheadIpfsLinks = new List<LoopheadIpfsLink>();
        loopheadMetadataRetrievalStates = new List<LoopheadMetadataRetrievalState>();
        loopheadVariationRetrievalStates = new List<LoopheadVariationRetrievalState>();
        //string baseUri = await EthereumService.GetLoopheadBaseUri(contractAddress);
        IpfsData ipfsDataLevelOne = await IpfsService.GetDirectoryContents(ipfsAddress);
        //IpfsData ipfsDataLevelTwo = await IpfsService.GetDirectoryContents(ipfsDataLevelOne.links[0].Cid.value)
        foreach(var links in ipfsDataLevelOne.links)
        {
            if(links.Name != "mint-params.json")
            {
                LoopheadIpfsLink loopheadIpfsLink = new LoopheadIpfsLink
                {
                    name = links.Name,
                    cid = links.Cid.value
                };
                LoopheadVariationRetrievalState loopheadVariationRetrievalState = new LoopheadVariationRetrievalState
                {
                        cid = links.Cid.value
                };
                loopheadIpfsLinks.Add(loopheadIpfsLink);
                loopheadVariationRetrievalStates.Add(loopheadVariationRetrievalState);
            }
        } 
    }

    private async void GetLoopheadVariationMetadataLinks(MouseEventArgs e, string loopheadMetadataLink)
    {
        foreach(var loopheadVariationRetrievalState in loopheadVariationRetrievalStates)
        {
            if(loopheadVariationRetrievalState.cid== loopheadMetadataLink)
            {
                loopheadVariationRetrievalState.retrievalState = VariationRetrievalState.retrieving;
                break;
            }
        }
        StateHasChanged();
        IpfsData ipfsDataLevelTwo = await IpfsService.GetDirectoryContents(loopheadMetadataLink);
        if(ipfsDataLevelTwo != null)
        {
            foreach(var link in ipfsDataLevelTwo.links)
            {
                foreach(var ipfsLink in loopheadIpfsLinks)
                {
                    //Debug.WriteLine(ipfsLink.cid);
                    //Debug.WriteLine(loopheadMetadataLink);
                    if(ipfsLink.cid == loopheadMetadataLink && ipfsLink.loopheads.Count != 25)
                    {
                        Loophead loophead = new Loophead
                            {
                                baseCid = loopheadMetadataLink,
                                baseId = link.Name.Split('_')[0],
                                variation = link.Name.Split('_')[1],
                                metadataCidLink = link.Cid.value
                            };
                        LoopheadMetadataRetrievalState loopheadMetadataRetrievalState = new LoopheadMetadataRetrievalState
                            {
                                metadataCid = link.Cid.value
                            };
                        ipfsLink.loopheads.Add(loophead);
                        loopheadMetadataRetrievalStates.Add(loopheadMetadataRetrievalState);
                        break;
                    }
                }
            }
            foreach(var loopheadVariationRetrievalState in loopheadVariationRetrievalStates)
            {
                if(loopheadVariationRetrievalState.cid== loopheadMetadataLink)
                {
                    loopheadVariationRetrievalState.retrievalState = VariationRetrievalState.success;
                    break;
                }
            }
            StateHasChanged();
        }
        else if(ipfsDataLevelTwo == null)
        {
            foreach(var loopheadVariationRetrievalState in loopheadVariationRetrievalStates)
            {
                if(loopheadVariationRetrievalState.cid== loopheadMetadataLink)
                {
                    loopheadVariationRetrievalState.retrievalState = VariationRetrievalState.error;
                    break;
                }
            }
            StateHasChanged();
        }
    }

    private async void GetLoopheadVariationMetadata(MouseEventArgs e, string loopheadMetadataLink)
    {
        foreach(var loopheadMetadataRetrievalState in loopheadMetadataRetrievalStates)
        {
            if(loopheadMetadataRetrievalState.metadataCid == loopheadMetadataLink)
            {
                loopheadMetadataRetrievalState.retrievalState = RetrievalState.retrieving;
                break;
            }
        }
        StateHasChanged();
        IpfsData ipfsDataLevelThree = await IpfsService.GetDirectoryContents(loopheadMetadataLink);
        if(ipfsDataLevelThree != null)
        {
            LoopheadMetadata loopheadMetadata = await IpfsService.GetLoopheadMetadata(ipfsDataLevelThree.links[0].Cid.value);
            if(loopheadMetadata != null)
            {
                foreach(var ipfsLink in loopheadIpfsLinks)
                {
                    foreach(var loophead in ipfsLink.loopheads)
                    {
                        if(loophead.metadataCidLink == loopheadMetadataLink)
                        {
                            loophead.metadata = loopheadMetadata;
                            break;
                        }
                    }
                }
                StateHasChanged();
            }
            else if(loopheadMetadata == null)
            {
                foreach(var loopheadMetadataRetrievalState in loopheadMetadataRetrievalStates)
                {
                    if(loopheadMetadataRetrievalState.metadataCid == loopheadMetadataLink)
                    {
                        loopheadMetadataRetrievalState.retrievalState = RetrievalState.error;
                        break;
                    }
                }
                StateHasChanged();
            }
        }
        else if(ipfsDataLevelThree == null)
        {
            foreach(var loopheadMetadataRetrievalState in loopheadMetadataRetrievalStates)
            {
                if(loopheadMetadataRetrievalState.metadataCid == loopheadMetadataLink)
                {
                    loopheadMetadataRetrievalState.retrievalState = RetrievalState.error;
                    break;
                }
            }
            StateHasChanged();
        }
    }
}
